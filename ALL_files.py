# main.py

import sys
import signal
import time
import logging
import os

from modules.utils.config_manager import ConfigManager
from modules.utils.logs import get_logger, log_system_info
from modules.utils.state_manager import StateManager
from modules.utils.media_handler import MediaHandler
from modules.rag_system.rag_retriever import RAGRetriever
from modules.external_apis.telegram_client import TelegramClient
from modules.external_apis.web_search import WebSearchClient
from modules.content_generation.lm_client import LMStudioClient
from modules.content_generation.prompt_builder import PromptBuilder
from modules.content_generation.content_validator import ContentValidator

class MonitoringService:
    """
    –°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º, –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –æ—à–∏–±–æ–∫.
    """
    def __init__(self, logger):
        self.topics_processed = 0
        self.topics_failed = 0
        self.logger = logger

    def log_success(self, topic):
        self.topics_processed += 1
        self.logger.info(f"[MONITOR] Topic processed: {topic}")

    def log_failure(self, topic, error):
        self.topics_failed += 1
        self.logger.error(f"[MONITOR] Topic failed: {topic}, error: {error}")

    def report(self):
        self.logger.info(f"[MONITOR] Stats: Success: {self.topics_processed}, Failed: {self.topics_failed}")

class RAGIngestionService:
    """
    –°–µ—Ä–≤–∏—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π RAG.
    """
    def __init__(self, rag_retriever, logger):
        self.rag_retriever = rag_retriever
        self.logger = logger

    def build_knowledge_base(self, folder):
        try:
            self.rag_retriever.process_inform_folder(folder)
            self.rag_retriever.build_knowledge_base()
            self.logger.info("Initial RAG knowledge base built.")
        except Exception as e:
            self.logger.error("Knowledge base build failed", exc_info=True)
            raise

class TelegramRAGSystem:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å RAG –∏ LM Studio.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    def __init__(self, config_path: str = "config/config.json"):
        self.logger = get_logger("Main")
        self.logger.info("üöÄ Initializing TelegramRAGSystem...")
        self.shutdown_requested = False

        try:
            self.config_manager = ConfigManager(config_path)
            self.config = self.config_manager.config
        except Exception as e:
            self.logger.critical("Config initialization failed", exc_info=True)
            sys.exit(1)

        self.setup_logging()
        self.validate_configuration()
        self.initialize_services()
        self.autoload_topics()  # --- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º ---

    def setup_logging(self):
        log_system_info(self.logger)

    def validate_configuration(self):
        if not self.config_manager.validate_config():
            self.logger.critical("Configuration validation failed.")
            sys.exit(1)
        self.logger.info("Configuration validated successfully.")

    def initialize_services(self):
        try:
            # RAG –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.rag_retriever = RAGRetriever(config=self.config["rag"])
            self.state_manager = StateManager(state_file="data/state.json")
            self.monitoring = MonitoringService(self.logger)
            self.ingestion = RAGIngestionService(self.rag_retriever, self.logger)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            self.lm_client = LMStudioClient(
                base_url=self.config["lm_studio"]["base_url"],
                model=self.config["lm_studio"]["model"],
                config=self.config["lm_studio"]
            )
            self.prompt_builder = PromptBuilder(prompt_folders=self.config["paths"].get("prompt_folders", [
                "data/prompt_1", "data/prompt_2", "data/prompt_3"
            ]))
            self.content_validator = ContentValidator(config=self.config)

            # –í–µ–±-–ø–æ–∏—Å–∫ –∏ –º–µ–¥–∏–∞
            serper_api_key = self.config_manager.get_serper_api_key()
            serper_endpoint = self.config_manager.get_config_value("serper.endpoint", "https://google.serper.dev/search")
            serper_results_limit = self.config_manager.get_config_value("serper.results_limit", 10)
            self.web_search = WebSearchClient(
                api_key=serper_api_key,
                endpoint=serper_endpoint,
                results_limit=serper_results_limit
            )
            self.media_handler = MediaHandler(media_folder=self.config["paths"].get("media_dir", "media"),
                                             config=self.config)

            # Telegram –∫–ª–∏–µ–Ω—Ç
            token = self.config_manager.get_telegram_token()
            channel_id = self.config_manager.get_telegram_channel_id()
            self.telegram_client = TelegramClient(token=token, channel_id=channel_id, config=self.config["telegram"])

        except Exception as e:
            self.logger.critical("Component initialization failed", exc_info=True)
            sys.exit(1)

    def autoload_topics(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–º—ã –∏–∑ data/topics.txt –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ StateManager,
        –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—à–∏–±–æ—á–Ω—ã—Ö.
        """
        topics_file = "data/topics.txt"
        if not os.path.isfile(topics_file):
            self.logger.warning(f"Topics file not found: {topics_file}")
            return

        try:
            with open(topics_file, "r", encoding="utf-8") as f:
                topics = [line.strip() for line in f if line.strip()]
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–º—ã
            existing = set(self.state_manager.get_unprocessed_topics() +
                           self.state_manager.get_processed_topics() +
                           self.state_manager.get_failed_topics())
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–µ–º—ã
            new_topics = [t for t in topics if t not in existing]
            if new_topics:
                self.logger.info(f"Autoloading {len(new_topics)} new topics into queue")
                self.state_manager.add_topics(new_topics)
            else:
                self.logger.info("No new topics found to autoload")
        except Exception as e:
            self.logger.error("Failed to autoload topics", exc_info=True)

    def graceful_shutdown(self, *_):
        self.shutdown_requested = True
        self.logger.warning("Shutdown signal received. Exiting loop...")

    def get_next_topic(self) -> str:
        topic = self.state_manager.get_next_unprocessed_topic()
        if topic:
            self.logger.info(f"Next topic selected: {topic}")
        else:
            self.logger.info("No more topics to process.")
        return topic

    def combine_contexts(self, rag_context: str, web_context: str) -> str:
        if not rag_context and not web_context:
            return ""
        elif not rag_context:
            return f"[Web context only]\n\n{web_context}"
        elif not web_context:
            return f"{rag_context}\n\n[–ù–µ—Ç web-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞]"
        return f"{rag_context}\n\n[–î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–∏—Å–∫–∞]\n\n{web_context}"

    def update_processing_state(self, topic: str, success: bool):
        try:
            self.state_manager.mark_topic_processed(topic, success)
            self.logger.info(f"Topic '{topic}' marked as {'processed' if success else 'failed'}.")
        except Exception as e:
            self.logger.error(f"Failed to update state for topic '{topic}': {str(e)}", exc_info=True)

    def handle_error(self, topic: str, error: Exception):
        try:
            self.logger.error(f"Error processing topic '{topic}': {str(error)}", exc_info=True)
            self.update_processing_state(topic, success=False)
            self.monitoring.log_failure(topic, error)
        except Exception as e:
            self.logger.critical("Failed during error handling!", exc_info=True)

    def main_processing_loop(self):
        while not self.shutdown_requested:
            topic = self.get_next_topic()
            if not topic:
                break

            try:
                # 1. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ RAG
                rag_context = self.rag_retriever.retrieve_context(topic)
                if rag_context is None:
                    raise ValueError("RAG context retrieval returned None")
                if not rag_context.strip():
                    self.logger.warning(f"RAG context is empty for topic: {topic}")

                # 2. Web-–ø–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                web_results = self.web_search.search(topic)
                if web_results is None:
                    raise ValueError("Web search returned None")
                web_context = self.web_search.extract_content(web_results)
                if not web_context.strip():
                    self.logger.warning(f"Web context is empty for topic: {topic}")

                # 3. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
                full_context = self.combine_contexts(rag_context, web_context)
                if not full_context.strip():
                    raise ValueError("Combined context is empty")

                # 4. –í—ã–±–æ—Ä –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                media_file = None
                try:
                    media_file = self.media_handler.get_random_media_file()
                    if media_file and not self.media_handler.validate_media_file(media_file):
                        self.logger.warning(f"Media file {media_file} is not valid. Skipping media.")
                        media_file = None
                except Exception as e:
                    self.logger.warning(f"Media handler error: {str(e)}")

                # 5. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
                prompt = self.prompt_builder.build_prompt(
                    topic=topic,
                    context=full_context,
                    media_file=media_file
                )
                if not prompt or not prompt.strip():
                    raise ValueError("Prompt building failed (empty prompt)")

                # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                content = self.lm_client.generate_content(prompt)
                if not content or not content.strip():
                    raise ValueError("Generated content is empty")

                # 7. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                validated_content = self.content_validator.validate_content(content, has_media=bool(media_file))
                if not validated_content or not validated_content.strip():
                    raise ValueError("Validated content is empty")

                # 8. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–æ–º (retry)
                success = False
                max_retries = self.config["telegram"].get("max_retries", 3)
                for attempt in range(1, max_retries + 1):
                    try:
                        if media_file:
                            success = self.telegram_client.send_media_message(validated_content, media_file)
                        else:
                            success = self.telegram_client.send_text_message(validated_content)
                        if success:
                            break
                    except Exception as te:
                        self.logger.error(f"Telegram send failed (attempt {attempt}): {te}")
                        time.sleep(2)
                self.update_processing_state(topic, success)
                if success:
                    self.monitoring.log_success(topic)
                else:
                    self.monitoring.log_failure(topic, "Telegram send failed")

                self.monitoring.report()
                time.sleep(self.config["telegram"]["post_interval"])

            except Exception as e:
                self.handle_error(topic, e)
                continue

    def run(self):
        self.logger.info("System starting up...")
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ shutdown-—Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.graceful_shutdown)
        signal.signal(signal.SIGTERM, self.graceful_shutdown)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π RAG
        try:
            self.ingestion.build_knowledge_base(self.config["rag"].get("inform_folder", "inform/"))
        except Exception as e:
            self.logger.critical(f"Failed to build RAG knowledge base: {e}", exc_info=True)
            sys.exit(1)
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        self.main_processing_loop()
        self.logger.info("System shut down gracefully.")

if __name__ == "__main__":
    system = TelegramRAGSystem()
    system.run()

# modules/content_generation/content_validator.py

import re
import logging
from typing import Dict

class ContentValidator:
    def __init__(self, config: dict):
        self.logger = logging.getLogger("ContentValidator")
        self.max_length_text = config["telegram"].get("max_text_length", 4096)
        self.max_length_caption = config["telegram"].get("max_caption_length", 1024)

    def validate_content(self, text: str, has_media: bool = False) -> str:
        original = text
        text = self.remove_thinking_blocks(text)
        text = self.remove_tables(text)
        text = self.remove_links(text)
        text = self.clean_html_markdown(text)
        text = self.clean_special_characters(text)

        if not self.validate_length(text, has_media):
            self.logger.warning("Text too long for Telegram.")
            raise ValueError("Text exceeds Telegram limits.")

        if not self.validate_content_quality(text):
            self.logger.warning("Content quality is too low.")
            raise ValueError("Text does not meet quality criteria.")

        return text.strip()

    def validate_length(self, text: str, has_media: bool) -> bool:
        limit = self.max_length_caption if has_media else self.max_length_text
        return len(text) <= limit

    def remove_thinking_blocks(self, text: str) -> str:
        return re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)

    def remove_tables(self, text: str) -> str:
        text = self.remove_markdown_tables(text)
        text = self.remove_html_tables(text)
        return text

    def remove_markdown_tables(self, text: str) -> str:
        # –£–¥–∞–ª—è–µ—Ç –∏ —Å—Ç—Ä–æ–∫–∏ —Å '|' –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ---|---
        return re.sub(r"(?m)^\s*(\|.+\|)|(:?-{3,}:?\|)+.*$", "", text)

    def remove_html_tables(self, text: str) -> str:
        return re.sub(r"<table.*?>.*?</table>", "", text, flags=re.DOTALL | re.IGNORECASE)

    def remove_links(self, text: str) -> str:
        # Markdown [text](url) ‚Üí text
        text = re.sub(r"\[(.*?)\]\(.*?\)", r"\1", text)
        # HTML <a href="url">text</a> ‚Üí text
        text = re.sub(r"<a .*?href=.*?>(.*?)</a>", r"\1", text, flags=re.IGNORECASE)
        return text

    def clean_html_markdown(self, text: str) -> str:
        return re.sub(r"</?(div|span|p|b|i|u|strong|em|code|pre|br|a|img)[^>]*>", "", text, flags=re.IGNORECASE)

    def clean_special_characters(self, text: str) -> str:
        return re.sub(r"[\x00-\x08\x0B-\x1F\x7F\u200B]+", "", text)

    def validate_content_quality(self, text: str) -> bool:
        if len(text.strip()) < 100:
            self.logger.warning("Text is too short.")
            return False
        if text.count("\n") < 1:
            self.logger.warning("Too few paragraphs.")
            return False
        return True

    def get_content_stats(self, text: str) -> Dict[str, int]:
        return {
            "length": len(text),
            "lines": text.count("\n"),
            "words": len(text.split())
        }

    def detect_thinking_patterns(self, text: str) -> list:
        return re.findall(r"<think>.*?</think>", text, flags=re.DOTALL)

    def format_for_telegram(self, text: str) -> str:
        return text.strip()

# lm_client.py

import logging
import requests
from typing import Dict, Any, List, Optional

class LMStudioClient:
    def __init__(self, base_url: str, model: str, config: Dict[str, Any]):
        self.base_url = base_url.rstrip("/")
        self.model = model
        self.max_tokens = config.get("max_tokens", 4096)
        self.max_chars = config.get("max_chars", 20000)
        self.temperature = config.get("temperature", 0.7)
        self.timeout = config.get("timeout", 60)
        self.history_limit = config.get("history_limit", 3)
        self.system_message = config.get("system_message", None)
        self.max_chars_with_media = config.get("max_chars_with_media", 4096)
        self.logger = logging.getLogger("LMStudioClient")
        self.history: List[Dict[str, str]] = []

        if self.system_message and len(self.system_message) > 1000:
            self.logger.warning("System message unusually long.")

        self.logger.info(f"LMStudioClient initialized with model '{model}' and config: {config}")

    def check_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LM Studio –∏ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª–∏.
        """
        try:
            response = requests.get(f"{self.base_url}/v1/models", timeout=5)
            response.raise_for_status()
            models = response.json().get("data", [])
            is_ok = any(m["id"] == self.model for m in models)
            self.logger.info("LM Studio connection OK" if is_ok else f"Model '{self.model}' not found in LM Studio")
            return is_ok
        except Exception as e:
            self.logger.error("Failed to connect to LM Studio", exc_info=True)
            return False

    def get_model_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å json-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö LM Studio.
        """
        try:
            resp = requests.get(f"{self.base_url}/v1/models")
            resp.raise_for_status()
            return resp.json()
        except Exception as e:
            self.logger.error("Model info retrieval failed", exc_info=True)
            return {}

    def generate_content(
        self,
        prompt: str,
        max_tokens: Optional[int] = None,
        with_media: bool = False
    ) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.
        –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è chat endpoint, –µ—Å–ª–∏ –Ω–µ—É–¥–∞—á–∞ - fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π completions endpoint.
        """
        max_tokens = max_tokens or self.max_tokens

        # Compose prompt with system message
        full_prompt = ""
        if self.system_message:
            full_prompt += f"{self.system_message}\n"
        full_prompt += prompt

        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å chat endpoint –ø–µ—Ä–≤—ã–º
        url_chat = f"{self.base_url}/v1/chat/completions"
        headers = {"Content-Type": "application/json"}
        payload_chat = {
            "model": self.model,
            "messages": [{"role": "user", "content": full_prompt}],
            "temperature": self.temperature,
            "max_tokens": max_tokens
        }
        try:
            response = requests.post(url_chat, json=payload_chat, timeout=self.timeout, headers=headers)
            response.raise_for_status()
            result = response.json()
            text = result.get("choices", [{}])[0].get("message", {}).get("content", "")

            # Fallback –µ—Å–ª–∏ –ø—É—Å—Ç–æ –∏–ª–∏ chat endpoint –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if not text:
                self.logger.warning("Empty response from chat endpoint, fallback to completions endpoint")
                url_comp = f"{self.base_url}/v1/completions"
                payload_comp = {
                    "model": self.model,
                    "prompt": full_prompt,
                    "max_tokens": max_tokens,
                    "temperature": self.temperature,
                    "stream": False
                }
                response = requests.post(url_comp, json=payload_comp, timeout=self.timeout, headers=headers)
                response.raise_for_status()
                result = response.json()
                text = result.get("choices", [{}])[0].get("text", "")

            limit = self.max_chars_with_media if with_media else self.max_chars
            if not self.validate_response_length(text, limit):
                self.logger.warning(f"Truncating response to {limit} chars")
                text = text[:limit]
            return text.strip()
        except Exception as e:
            self.logger.error("Content generation failed", exc_info=True)
            raise

    def generate_with_retry(
        self,
        prompt: str,
        max_retries: int = 3,
        with_media: bool = False
    ) -> str:
        """
        –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        for attempt in range(1, max_retries + 1):
            try:
                return self.generate_content(prompt, with_media=with_media)
            except Exception as e:
                self.logger.warning(f"Retry {attempt}/{max_retries} for prompt generation")
                if attempt == max_retries:
                    raise

    def validate_response_length(self, text: str, max_length: int = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É.
        """
        if max_length is None:
            max_length = self.max_chars
        if len(text) <= max_length:
            return True
        self.logger.warning(f"Response exceeds max length ({len(text)} > {max_length})")
        return False

    def request_shorter_version(self, original_prompt: str, current_length: int, target_length: int) -> str:
        """
        –ü—Ä–æ—Å–∏—Ç LM Studio —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç.
        """
        instruction = (
            f"\n\n[–ò–ù–°–¢–†–£–ö–¶–ò–Ø]: –°–æ–∫—Ä–∞—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–æ {target_length} —Å–∏–º–≤–æ–ª–æ–≤. "
            "–°–æ—Ö—Ä–∞–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ —Å–¥–µ–ª–∞–π –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º."
        )
        new_prompt = original_prompt + instruction
        return self.generate_with_retry(new_prompt)

    def estimate_tokens(self, text: str) -> int:
        """
        –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ —á–∏—Å–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞).
        """
        return int(len(text) / 4)

    def set_generation_parameters(self, temperature: float, top_p: float = None, top_k: int = None):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        """
        self.temperature = temperature
        self.logger.info(f"Set generation temperature to {temperature}")
        if top_p:
            self.logger.info(f"Set top_p to {top_p}")
        if top_k:
            self.logger.info(f"Set top_k to {top_k}")

    def get_generation_stats(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞/–æ—Ç–ª–∞–¥–∫–∏).
        """
        return {
            "temperature": self.temperature,
            "max_tokens": self.max_tokens,
            "timeout": self.timeout,
            "max_chars": self.max_chars,
            "max_chars_with_media": self.max_chars_with_media,
            "history_limit": self.history_limit,
            "system_message": self.system_message
        }

    def clear_conversation_history(self):
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
        """
        self.history = []
        self.logger.debug("Conversation history cleared.")

    def add_to_history(self, user_message: str, bot_message: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
        """
        self.history.append({"user": user_message, "bot": bot_message})
        if self.history_limit and len(self.history) > self.history_limit:
            self.history = self.history[-self.history_limit:]

    def health_check(self) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ LM Studio.
        """
        try:
            resp = requests.get(f"{self.base_url}/health")
            resp.raise_for_status()
            return resp.json()
        except Exception as e:
            self.logger.warning("Health check failed", exc_info=True)
            return {"status": "unreachable"}

import os
import random
import logging
from pathlib import Path
from typing import List, Tuple, Dict, Optional

class PromptBuilder:
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Å–∫–ª–µ–µ–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ –¥–æ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    REQUIRED_PLACEHOLDERS = ["{TOPIC}", "{CONTEXT}"]

    def __init__(self, prompt_folders: List[str]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PromptBuilder.
        :param prompt_folders: —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –ø–∞–ø–∫–∞–º —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–æ–º–ø—Ç–æ–≤.
        """
        self.prompt_folders = [Path(folder) for folder in prompt_folders]
        self.logger = logging.getLogger("PromptBuilder")
        self.templates: Dict[str, List[str]] = {}
        self.load_prompt_templates()

    def load_prompt_templates(self) -> None:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ self.templates.
        –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø–∏—à–µ—Ç warning.
        """
        for folder in self.prompt_folders:
            if not folder.exists():
                self.logger.warning(f"Prompt folder does not exist: {folder}")
                continue
            self.templates[str(folder)] = self.scan_prompt_folder(folder)
            self.logger.info(f"Loaded {len(self.templates[str(folder)])} templates from {folder}")

    def scan_prompt_folder(self, folder_path: Path) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ .txt-—Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ.
        """
        return [str(p) for p in folder_path.glob("*.txt")]

    def select_random_templates(self) -> List[str]:
        """
        –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É –∏–∑ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏.
        –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ ‚Äî –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
        """
        selected = []
        for folder in self.prompt_folders:
            templates = self.templates.get(str(folder), [])
            if templates:
                selected.append(random.choice(templates))
            else:
                selected.append("")
        return selected

    def read_template_file(self, file_path: str) -> str:
        """
        –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞.
        –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è ‚Äî –ø–∏—à–µ—Ç –æ—à–∏–±–∫—É –≤ –ª–æ–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
        """
        if not file_path:
            return ""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                return f.read()
        except Exception as e:
            self.logger.error(f"Failed to read prompt file: {file_path}", exc_info=True)
            return ""

    def build_prompt(self, topic: str, context: str, media_file: Optional[str] = None) -> str:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:
        - –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É –∏–∑ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
        - –°–∫–ª–µ–∏–≤–∞–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–æ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ—Å—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        - –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        :param topic: –¢–µ–º–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        :param media_file: –ü—É—Ç—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        :raises ValueError: –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
        """
        template_paths = self.select_random_templates()
        template_texts = [self.read_template_file(path) for path in template_paths]
        content = "\n\n".join(template_texts)

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ –∑–∞–º–µ–Ω—ã ‚Äî –≤—Å–µ –ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –µ—Å—Ç—å –≤ —Å–∫–ª–µ–µ–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
        if not self.validate_prompt_structure(content):
            self.logger.error("Prompt structure validation failed. Missing required placeholders in templates.")
            raise ValueError("Prompt structure validation failed. Missing required placeholders in templates.")

        replacements = {
            "{TOPIC}": topic.strip(),
            "{CONTEXT}": context.strip(),
            "{UPLOADFILE}": media_file.strip() if media_file else ""
        }

        prompt = self.replace_placeholders(content, replacements)

        # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã (help debug)
        unused = [ph for ph in self.REQUIRED_PLACEHOLDERS if ph in prompt]
        if unused:
            self.logger.warning(f"Prompt still contains unused placeholders: {unused}")

        return prompt

    def replace_placeholders(self, template: str, replacements: Dict[str, str]) -> str:
        """
        –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è.
        """
        for key, value in replacements.items():
            template = template.replace(key, value)
        return template

    def validate_prompt_structure(self, template: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —à–∞–±–ª–æ–Ω–µ (–¥–æ –∑–∞–º–µ–Ω—ã) –µ—Å—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã.
        """
        for required in self.REQUIRED_PLACEHOLDERS:
            if required not in template:
                self.logger.error(f"Prompt missing required placeholder: {required}")
                return False
        return True

    def check_placeholder_presence(self, template: str) -> Dict[str, bool]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: True/False} ‚Äî –µ—Å—Ç—å –ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ —à–∞–±–ª–æ–Ω–µ.
        """
        all_ph = self.REQUIRED_PLACEHOLDERS + ["{UPLOADFILE}"]
        return {ph: (ph in template) for ph in all_ph}

    def get_template_stats(self) -> Dict[str, int]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤) –ø–æ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ.
        """
        return {folder: len(templates) for folder, templates in self.templates.items()}

    def reload_templates(self) -> None:
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
        """
        self.logger.info("Reloading prompt templates...")
        self.load_prompt_templates()

    def test_template_combination(self, topic: str, context: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
        """
        return self.build_prompt(topic, context, media_file="media/sample.jpg")


# modules/utils/config_manager.py

import json
import logging
from pathlib import Path
from typing import Any, Optional, Union

class ConfigManager:
    def __init__(self, config_path: Union[str, Path]):
        self.config_path = Path(config_path)
        self.config = {}
        self.logger = logging.getLogger("ConfigManager")
        self.load_config()

    def load_config(self) -> None:
        if not self.config_path.exists():
            raise FileNotFoundError(f"Config file not found: {self.config_path}")
        try:
            with self.config_path.open("r", encoding="utf-8") as file:
                self.config = json.load(file)
                self.logger.info(f"Configuration loaded from {self.config_path}")
        except json.JSONDecodeError as e:
            self.logger.exception("Failed to decode JSON config")
            raise ValueError("Invalid JSON format in configuration") from e

    def get_config_value(self, key_path: str, default: Any = None) -> Any:
        keys = key_path.split(".")
        value = self.config
        try:
            for key in keys:
                value = value[key]
            return value
        except (KeyError, TypeError):
            self.logger.warning(f"Missing config key: {key_path}. Using default: {default}")
            return default

    def get_telegram_token(self) -> str:
        token_path = Path(self.get_config_value("telegram.bot_token_file", "config/telegram_token.txt"))
        return self._read_text_file(token_path, "Telegram Token")

    def get_telegram_channel_id(self) -> str:
        channel_path = Path(self.get_config_value("telegram.channel_id_file", "config/telegram_channel.txt"))
        return self._read_text_file(channel_path, "Telegram Channel ID")

    def get_lm_studio_config(self) -> dict:
        return self.get_config_value("lm_studio", {})

    def get_rag_config(self) -> dict:
        return self.get_config_value("rag", {})

    def get_serper_api_key(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á Serper API –∏–∑ config.json –∏–ª–∏ —Ñ–∞–π–ª–∞, —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ."""
        # 1. –ù–æ–≤—ã–π —Å—Ç–∏–ª—å: external_apis.serper.api_key
        key = self.get_config_value("external_apis.serper.api_key", None)
        if key:
            return key
        # 2. –°—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å: external_apis["serper.api_key"]
        key = self.get_config_value("external_apis.serper.api_key", None)
        if key:
            return key
        # 3. –ß–µ—Ä–µ–∑ —Ñ–∞–π–ª: serper.api_key_file
        api_key_file = self.get_config_value("serper.api_key_file", None)
        if api_key_file:
            try:
                return self._read_text_file(Path(api_key_file), "Serper API Key")
            except FileNotFoundError:
                self.logger.error(f"Serper API key file not found: {api_key_file}")
        # 4. –ß–µ—Ä–µ–∑ —Ñ–∞–π–ª: external_apis.serper.api_key_file
        api_key_file = self.get_config_value("external_apis.serper.api_key_file", None)
        if api_key_file:
            try:
                return self._read_text_file(Path(api_key_file), "Serper API Key (external_apis)")
            except FileNotFoundError:
                self.logger.error(f"Serper API key file not found: {api_key_file}")
        self.logger.critical("Serper API key not found in config or file!")
        return ""

    def update_config_value(self, key_path: str, value: Any) -> None:
        keys = key_path.split(".")
        ref = self.config
        for key in keys[:-1]:
            ref = ref.setdefault(key, {})
        ref[keys[-1]] = value
        self.logger.info(f"Updated config key: {key_path} = {value}")

    def save_config(self) -> None:
        try:
            with self.config_path.open("w", encoding="utf-8") as file:
                json.dump(self.config, file, indent=4, ensure_ascii=False)
            self.logger.info(f"Configuration saved to {self.config_path}")
        except Exception as e:
            self.logger.exception("Failed to save configuration")
            raise IOError("Unable to save configuration") from e

    def validate_config(self) -> bool:
        required_keys = ["lm_studio", "rag", "telegram", "serper", "processing"]
        for key in required_keys:
            if key not in self.config:
                self.logger.error(f"Missing required section in config: '{key}'")
                return False
        self.logger.info("Configuration validated successfully")
        return True

    def _read_text_file(self, file_path: Path, label: str) -> str:
        if not file_path.exists():
            self.logger.error(f"{label} file not found: {file_path}")
            raise FileNotFoundError(f"{label} file missing: {file_path}")
        try:
            content = file_path.read_text(encoding="utf-8").strip()
            self.logger.debug(f"{label} loaded: {content[:10]}...")
            return content
        except Exception as e:
            self.logger.exception(f"Failed to read {label} from file")
            raise IOError(f"Error reading {label}") from e


# log.py

import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
import platform
import psutil
import time
import json

LOG_DIR = Path("logs")
LOG_DIR.mkdir(exist_ok=True)

def setup_logger(name: str, log_file: str, level=logging.INFO) -> logging.Logger:
    """
    –°–æ–∑–¥–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –ª–æ–≥–≥–µ—Ä —Å —Ñ–∞–π–ª–æ–≤—ã–º –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
    """
    logger = logging.getLogger(name)
    logger.setLevel(level)

    if not logger.handlers:
        file_handler = setup_file_handler(log_file, level)
        console_handler = setup_console_handler(level)

        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        logger.propagate = False  # –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º –≤ root

    return logger

def setup_file_handler(log_file: str, level=logging.INFO) -> RotatingFileHandler:
    """
    –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π.
    """
    file_path = LOG_DIR / log_file
    handler = RotatingFileHandler(
        filename=file_path,
        maxBytes=5 * 1024 * 1024,  # 5MB
        backupCount=3,
        encoding='utf-8'
    )
    formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] [%(name)s] - %(message)s')
    handler.setFormatter(formatter)
    handler.setLevel(level)
    return handler

def setup_console_handler(level=logging.INFO) -> logging.StreamHandler:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤.
    """
    console = logging.StreamHandler()
    formatter = logging.Formatter('[%(levelname)s] %(message)s')
    console.setFormatter(formatter)
    console.setLevel(level)
    return console

def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä —Å —Ñ–∞–π–ª–æ–≤—ã–º –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º.
    """
    return setup_logger(name, f"{name.lower()}.log")

# ----------------------------- SYSTEM METRICS -----------------------------

def log_system_info(logger: logging.Logger):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –ø–∞–º—è—Ç—å, CPU, –∞–ø—Ç–∞–π–º).
    """
    info = {
        "platform": platform.platform(),
        "cpu_count": psutil.cpu_count(),
        "memory_total_mb": round(psutil.virtual_memory().total / (1024 * 1024)),
        "boot_time": time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(psutil.boot_time())),
    }
    logger.info(f"System Info: {json.dumps(info)}")

def log_processing_stats(topics_processed: int, errors: int, success_rate: float, logger: logging.Logger):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º.
    """
    logger.info(
        f"Processing Stats | Topics: {topics_processed}, Errors: {errors}, Success Rate: {success_rate:.2f}"
    )

def log_rag_performance(retrieval_time: float, context_length: int, logger: logging.Logger):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å RAG –ø–æ–∏—Å–∫–∞.
    """
    logger.debug(
        f"RAG | Time: {retrieval_time:.2f}s, Context length: {context_length} chars"
    )

def log_telegram_status(message_sent: bool, logger: logging.Logger, error_details: str = None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    """
    if message_sent:
        logger.info("Telegram message sent successfully.")
    else:
        logger.error(f"Telegram message failed. Reason: {error_details}")

# state_manager.py

import json
import logging
from pathlib import Path
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Union

class StateManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã: —Ç—Ä–µ–∫–∏–Ω–≥ —Ç–µ–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏,
    —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """

    def __init__(self, state_file: Union[str, Path] = "data/state.json"):
        self.state_file = Path(state_file)
        self.logger = logging.getLogger("StateManager")

        self.default_state = {
            "processed": {},
            "unprocessed": [],
            "failed": {},
            "statistics": {
                "topics_processed": 0,
                "success_count": 0,
                "error_count": 0,
                "start_time": datetime.utcnow().isoformat()
            },
            "system_status": "INIT",
            "last_activity": datetime.utcnow().isoformat()
        }
        self.state: Dict[str, Any] = {}

        self.load_state()

    # ----------- –ì—Ä—É–ø–ø–∞: –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è -----------
    def load_state(self) -> None:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–µ–Ω).
        –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        if not self.state_file.exists() or self.state_file.stat().st_size == 0:
            self.logger.warning(f"State file {self.state_file} missing or empty. Initializing default state.")
            self.state = self.default_state.copy()
            self.save_state()
            return
        try:
            with self.state_file.open("r", encoding="utf-8") as f:
                self.state = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏ "–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            self._ensure_state_integrity()
            self.logger.info(f"State loaded from {self.state_file}")
        except Exception as e:
            self.logger.error("Failed to load state. Initializing default state.", exc_info=True)
            self.state = self.default_state.copy()
            self.save_state()

    def save_state(self) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª. –ê—Ç–æ–º–∞—Ä–Ω–æ (—Å–Ω–∞—á–∞–ª–∞ tmp, –∑–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π).
        """
        tmp_file = self.state_file.with_suffix(".tmp")
        try:
            with tmp_file.open("w", encoding="utf-8") as f:
                json.dump(self.state, f, indent=4, ensure_ascii=False)
            tmp_file.replace(self.state_file)
            self.logger.debug(f"State saved to {self.state_file}")
        except Exception as e:
            self.logger.error(f"Failed to save state to {self.state_file}", exc_info=True)

    def _ensure_state_integrity(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ self.state (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
        –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–∑ default_state.
        """
        for key, value in self.default_state.items():
            if key not in self.state:
                self.state[key] = value if not isinstance(value, dict) else value.copy()
        # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        for k, v in self.default_state["statistics"].items():
            if "statistics" not in self.state:
                self.state["statistics"] = {}
            if k not in self.state["statistics"]:
                self.state["statistics"][k] = v

    # ----------- –ì—Ä—É–ø–ø–∞: –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏ -----------
    def mark_topic_processed(self, topic: str, success: bool, details: Optional[dict] = None) -> None:
        """
        –û—Ç–º–µ—á–∞–µ—Ç —Ç–µ–º—É –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∏–ª–∏ failed.
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–∑ unprocessed –≤ processed/failed, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        """
        now = datetime.utcnow().isoformat()
        details = details or {}

        if success:
            self.state["processed"][topic] = {
                "status": "success",
                "timestamp": now,
                "details": details
            }
            self.state["statistics"]["success_count"] += 1
        else:
            self.state["failed"][topic] = {
                "status": "failed",
                "timestamp": now,
                "error": details
            }
            self.state["statistics"]["error_count"] += 1

        if topic in self.state["unprocessed"]:
            self.state["unprocessed"].remove(topic)

        self.state["statistics"]["topics_processed"] += 1
        self.state["last_activity"] = now
        self.save_state()

    def add_topic(self, topic: str) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å.
        """
        if topic not in self.state["unprocessed"] \
           and topic not in self.state["processed"] \
           and topic not in self.state["failed"]:
            self.state["unprocessed"].append(topic)
            self.save_state()

    def add_topics(self, topics: List[str]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–µ–º.
        """
        for topic in topics:
            self.add_topic(topic)

    def get_next_unprocessed_topic(self) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ç–µ–º—É, –ª–∏–±–æ None.
        """
        return self.state["unprocessed"][0] if self.state["unprocessed"] else None

    def get_unprocessed_topics(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–º.
        """
        return list(self.state["unprocessed"])

    def get_processed_topics(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–º.
        """
        return list(self.state["processed"].keys())

    def get_failed_topics(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –æ—à–∏–±–∫–∞–º–∏.
        """
        return list(self.state["failed"].keys())

    def reset_failed_topics(self) -> None:
        """
        –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ failed —Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ unprocessed, –æ—á–∏—â–∞–µ—Ç failed.
        """
        failed = self.get_failed_topics()
        # –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
        for topic in failed:
            if topic not in self.state["unprocessed"]:
                self.state["unprocessed"].append(topic)
        self.state["failed"] = {}
        self.save_state()
        self.logger.info("Failed topics reset to unprocessed.")

    # ----------- –ì—Ä—É–ø–ø–∞: –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ -----------
    def get_processing_statistics(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º.
        """
        return dict(self.state["statistics"])

    def add_processing_stats(self, stats: dict) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç (–¥–æ–ø–æ–ª–Ω—è–µ—Ç) —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        """
        self.state["statistics"].update(stats)
        self.save_state()

    def get_system_uptime(self) -> float:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–ø—Ç–∞–π–º —Å–∏—Å—Ç–µ–º—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞.
        """
        try:
            start = datetime.fromisoformat(self.state["statistics"]["start_time"])
        except Exception:
            start = datetime.utcnow()
        return (datetime.utcnow() - start).total_seconds()

    def set_system_status(self, status: str) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ("RUNNING", "SHUTDOWN", "ERROR" –∏ —Ç.–¥.).
        """
        self.state["system_status"] = status
        self.state["last_activity"] = datetime.utcnow().isoformat()
        self.save_state()

    def get_system_status(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.
        """
        return self.state.get("system_status", "UNKNOWN")

    def get_last_activity(self) -> datetime:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        """
        try:
            return datetime.fromisoformat(self.state["last_activity"])
        except Exception:
            return datetime.utcnow()

    # ----------- –ì—Ä—É–ø–ø–∞: –ë—ç–∫–∞–ø—ã, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -----------
    def backup_state(self) -> str:
        """
        –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ <state_file>.backup.json)
        """
        backup_path = self.state_file.with_suffix(".backup.json")
        try:
            with backup_path.open("w", encoding="utf-8") as f:
                json.dump(self.state, f, indent=4, ensure_ascii=False)
            self.logger.info(f"State backup saved to {backup_path}")
            return str(backup_path)
        except Exception as e:
            self.logger.error("Failed to backup state.", exc_info=True)
            return ""

    def restore_state(self, backup_path: Union[str, Path]) -> bool:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.
        """
        path = Path(backup_path)
        if not path.exists():
            self.logger.error(f"Backup file not found: {backup_path}")
            return False

        try:
            with path.open("r", encoding="utf-8") as f:
                self.state = json.load(f)
            self._ensure_state_integrity()
            self.save_state()
            self.logger.info("State restored from backup.")
            return True
        except Exception as e:
            self.logger.error("Failed to restore state.", exc_info=True)
            return False

    # ----------- –ì—Ä—É–ø–ø–∞: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ (get/set/delete) -----------
    def get(self, key: str, default: Any = None) -> Any:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å).
        """
        return self.state.get(key, default)

    def set(self, key: str, value: Any) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å).
        """
        self.state[key] = value
        self.save_state()

    def delete(self, key: str) -> None:
        """
        –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å).
        """
        if key in self.state:
            del self.state[key]
            self.save_state()

    # ----------- –ì—Ä—É–ø–ø–∞: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –≤—ã–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è -----------
    def dump_state(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—É–¥–æ–±–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
        """
        return json.dumps(self.state, indent=2, ensure_ascii=False)

    def print_state(self) -> None:
        """
        –ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª–æ–≥ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å).
        """
        self.logger.info(f"STATE DUMP:\n{self.dump_state()}")
